@namespace CivitaiFirehose.Components

<div class="grid-container">
    @foreach (var image in Images.OrderByDescending(s => s.CreatedAt))
    {
        <div class="grid-item">
            <div class="image-container @(image.PostId == HighlightedPostId ? "highlighted" : "")">
                <a href="@image.PostUrl" target="_blank">
                    <img src="@image.ImageUrl" alt="Grid Item">
                </a>
                <button class="overlay-button star-button" @onclick="() => OnImageButtonClick.InvokeAsync(image)">
                    @GetDownloadStatusIcon(image)
                </button>
                <button class="overlay-button download-all-button" @onclick="() => OnDownloadAllClick.InvokeAsync(image)">
                    ‚¨áÔ∏è
                </button>
                <button class="overlay-button blacklist-button" @onclick="() => OnBlacklistUser.InvokeAsync(image)">
                    ‚ùå
                </button>
                <button class="overlay-button highlight-button" @onclick="() => OnHighlightRelatedImages.InvokeAsync(image)">
                    @GetHighlightStatusIcon()
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public IEnumerable<ImageModel> Images { get; set; } = [];

    [Parameter]
    public int? HighlightedPostId { get; set; }

    [Parameter]
    public int? ImagesInHighlightedPost { get; set; }

    [Parameter]
    public EventCallback<ImageModel> OnImageButtonClick { get; set; }

    [Parameter]
    public EventCallback<ImageModel> OnDownloadAllClick { get; set; }

    [Parameter]
    public EventCallback<ImageModel> OnBlacklistUser { get; set; }

    [Parameter]
    public EventCallback<ImageModel> OnHighlightRelatedImages { get; set; }

    private string GetDownloadStatusIcon(ImageModel image)
    {
        return image.PushStatus switch
        {
            ImagePushStatus.NotPushed => "\u2b50",  // ‚≠ê
            ImagePushStatus.Pushing => "\u23f3",    // ‚è≥
            ImagePushStatus.Failed => "\u274c",     // ‚ùå
            ImagePushStatus.Succeeded => "\u2713",  // ‚úì
            var _ => throw new ArgumentOutOfRangeException(nameof(image))
        };
    }

    private string GetHighlightStatusIcon()
    {
        if (ImagesInHighlightedPost is null)
        {
            return "\ud83d\udd0d"; // üîç
        }

        var icon = ImagesInHighlightedPost switch
        {
            0 => throw new ArgumentOutOfRangeException(nameof(ImagesInHighlightedPost)),
            1 => "1Ô∏è‚É£",
            2 => "2Ô∏è‚É£",
            3 => "3Ô∏è‚É£",
            4 => "4Ô∏è‚É£",
            5 => "5Ô∏è‚É£",
            6 => "6Ô∏è‚É£",
            7 => "7Ô∏è‚É£",
            8 => "8Ô∏è‚É£",
            9 => "9Ô∏è‚É£",
            var _ => "‚ûï"
        };

        return icon;
    }
}