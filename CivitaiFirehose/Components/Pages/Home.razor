@page "/"
@implements IDisposable
@rendermode InteractiveServer
@inject IImageService ImageService
@inject ILogger<Home> Logger

@if (_images.Count > 8)
{

}
<div class="grid-container">
    <div class="grid-item">
        <img src="/api/placeholder/300/300" alt="Grid Item 1">
    </div>
    <div class="grid-item">
        <img src="/api/placeholder/300/300" alt="Grid Item 2">
    </div>
    <div class="grid-item">
        <img src="/api/placeholder/300/300" alt="Grid Item 3">
    </div>
    <div class="grid-item">
        <img src="/api/placeholder/300/300" alt="Grid Item 4">
    </div>
    <div class="grid-item">
        <img src="/api/placeholder/300/300" alt="Grid Item 5">
    </div>
    <div class="grid-item">
        <img src="/api/placeholder/300/300" alt="Grid Item 6">
    </div>
    <div class="grid-item">
        <img src="/api/placeholder/300/300" alt="Grid Item 7">
    </div>
    <div class="grid-item">
        <img src="/api/placeholder/300/300" alt="Grid Item 8">
    </div>
    <div class="grid-item">
        <img src="/api/placeholder/300/300" alt="Grid Item 9">
    </div>
</div>
<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: repeat(3, 1fr);
        gap: 10px;
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
    }

    .grid-item {
        width: 100%;
        aspect-ratio: 1;
        overflow: hidden;
    }

    .grid-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }
</style>

@code {
    private List<ImageModel> _images = new();
    
    protected override void OnInitialized()
    {
        Logger.LogInformation("Entered OnInitialized");
        _images = ImageService.GetImages();
        ImageService.NewImagesFound += SetImages;
    }

    private async Task SetImages()
    {
        Logger.LogInformation("Just entered SetImages");
        
        await InvokeAsync(() => {
            _images = ImageService.GetImages();
            Logger.LogInformation("Just set images");
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Logger.LogInformation("Disposing Home");
        ImageService.NewImagesFound -= SetImages;
    }
}