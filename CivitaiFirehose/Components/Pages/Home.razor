@page "/"
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<div class="grid grid-cols-4 gap-4 p-4">
    @foreach (var img in _images)
    {
        <div class="relative">
            <img src="@img.Url" alt="@img.Title" class="w-full h-48 object-cover rounded-lg" />
            @if (!string.IsNullOrEmpty(img.Title))
            {
                <div class="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white p-2 rounded-b-lg">
                    @img.Title
                </div>
            }
        </div>
    }
</div>

@code {
    HubConnection? _hubConnection;
    List<ImageData> _images = new();
    const int MaxImages = 20;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/imagehub"))
        .WithAutomaticReconnect([TimeSpan.Zero, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5)])
        .Build();
        
        _hubConnection.On<ImageData>("NewImage", img =>
            {
                _images.Insert(0, img);
                if (_images.Count > MaxImages)
                    _images.RemoveAt(_images.Count - 1);

                InvokeAsync(StateHasChanged);
            });
        
        _hubConnection.Closed += async (error) =>
        {
            Console.WriteLine($"Connection closed: {error?.Message}");
            
            await Task.Delay(new Random().Next(0, 5) * 1000);
            await _hubConnection.StartAsync();
            await _hubConnection.InvokeAsync("ClientReady", _hubConnection.ConnectionId);
        };

        _hubConnection.Reconnecting += (error) =>
        {
            Console.WriteLine($"Reconnecting: {error?.Message}");
            return Task.CompletedTask;
        };

        _hubConnection.Reconnected += (connectionId) =>
        {
            Console.WriteLine($"Reconnected with ID: {connectionId}");
            return Task.CompletedTask;
        };

        await ConnectToHub();
    }
    
    private async Task ConnectToHub()
    {
        try 
        {
            if (_hubConnection.State != HubConnectionState.Connected)
            {
                _hubConnection.On<ImageData>("NewImage", img =>
                {
                    _images.Insert(0, img);
                    if (_images.Count > MaxImages)
                        _images.RemoveAt(_images.Count - 1);
                    InvokeAsync(StateHasChanged);
                });

                await _hubConnection.StartAsync();
                await _hubConnection.InvokeAsync("ClientReady", _hubConnection.ConnectionId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to connect: {ex.Message}");
            // Try again after a delay
            await Task.Delay(5000);
            await ConnectToHub();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }
}