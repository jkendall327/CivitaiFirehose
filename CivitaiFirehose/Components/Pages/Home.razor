@page "/"
@implements IDisposable
@rendermode InteractiveServer
@inject HomeViewmodel Viewmodel
@inject JsService JsService
@inject ILogger<Home> Logger

<link href="/css/home.css" rel="stylesheet"/>

<HeadContent>
    <PageTitle>@Viewmodel.PageTitle</PageTitle>
</HeadContent>

<HeaderBar/>

<ImageFeed 
    Images="Viewmodel.Images"
    HighlightedPostId="Viewmodel.HighlightedPostId"
    ImagesInHighlightedPost="Viewmodel.ImagesInHighlightedPost"
    OnImageButtonClick="OnImageButtonClick"
    OnDownloadAllClick="OnDownloadAllClick"
    OnBlacklistUser="OnBlacklistUser"
    OnHighlightRelatedImages="OnHighlightRelatedImages" />

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? PostId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? ModelId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Viewmodel.OnInitialized(PostId, ModelId);
        
        Viewmodel.StateUpdated += async () =>
        {
            Logger.LogDebug("Viewmodel has requested state updated in UI");
            await InvokeAsync(StateHasChanged);
        };
        
        Viewmodel.TitleUpdated += ViewmodelOnTitleUpdated;
    }

    private async Task ViewmodelOnTitleUpdated(string newTitle)
    {
        Logger.LogDebug("Updating UI title to {NewTitle}", newTitle);
        await JsService.SetTabTitle(newTitle);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await JsService.Initialise(this);
        await Viewmodel.OnAfterRenderAsync();
    }
    
    [JSInvokable]
    public async Task OnTabFocused() => await Viewmodel.OnTabFocused();

    private async Task OnImageButtonClick(ImageModel image) => await Viewmodel.OnImageButtonClick(image);
    private async Task OnDownloadAllClick(ImageModel image) => await Viewmodel.OnDownloadAllClick(image);
    private async Task OnBlacklistUser(ImageModel image) => await Viewmodel.OnBlacklistUser(image);
    private Task OnHighlightRelatedImages(ImageModel image) => Viewmodel.OnHighlightRelatedImages(image);

    public void Dispose() => Viewmodel.Dispose();
}