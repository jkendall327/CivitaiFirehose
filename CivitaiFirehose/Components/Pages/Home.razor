@page "/"
@implements IDisposable
@rendermode InteractiveServer
@inject IImageService ImageService
@inject ILogger<Home> Logger

<div class="grid-container">
    @if (_images.Count > 0)
    {
        @for (var i = 0; i < _images.Count; i++)
        {
            var imageUrl = i < _images.Count ? _images[i].ImageUrl : "/api/placeholder/300/300";
            var postUrl = i < _images.Count ? _images[i].PostUrl : string.Empty;
            
            <div class="grid-item">
                <a href="@postUrl">
                    <img src="@imageUrl" alt="Grid Item @(i + 1)">
                </a>
            </div>
        }
    }
</div>

<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        grid-template-rows: repeat(6, 1fr);
        gap: 15px;
        margin: 0 auto;
        padding: 20px;
    }

    .grid-item {
        width: 100%;
        aspect-ratio: 1;
        overflow: hidden;
    }

    .grid-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }
</style>

@code {
    private List<ImageModel> _images = [];
    
    protected override void OnInitialized()
    {
        _images = ImageService.GetImages();
        ImageService.NewImagesFound += SetImages;
    }

    private async Task SetImages()
    {
        await InvokeAsync(() => {
            _images = ImageService.GetImages();
            Logger.LogInformation("Got {ImageCount} images from service, updating UI", _images.Count);
            StateHasChanged();
        });
    }

    public void Dispose() => ImageService.NewImagesFound -= SetImages;
}