@page "/"
@using System.Threading.Channels
@implements IDisposable
@rendermode InteractiveServer
@inject ICivitaiPoller CivitaiPoller
@inject ChannelWriter<ImageModel> Writer
@inject JsService JsService
@inject ILogger<Home> Logger

<HeadContent>
    <PageTitle>@PageTitle</PageTitle>
</HeadContent>

<div class="grid-container">
    @foreach (var image in _images)
    {
        <div class="grid-item">
            <div class="image-container">
                <a href="@image.PostUrl" target="_blank">
                    <img src="@image.ImageUrl" alt="Grid Item">
                </a>
                <button class="overlay-button star-button" @onclick="() => OnImageButtonClick(image)">
                    @GetDownloadStatusIcon(image)
                </button>
                <button class="overlay-button download-all-button" @onclick="() => OnDownloadAllClick(image)">
                    ⬇️
                </button>
            </div>
        </div>
    }
</div>

<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        grid-template-rows: repeat(6, 1fr);
        gap: 15px;
        margin: 0 auto;
        padding: 20px;
    }

    .grid-item {
        width: 100%;
        aspect-ratio: 1;
    }

    .image-container {
        position: relative;
        width: 100%;
        height: 100%;
        z-index: 1;
    }

    .image-container:hover {
        z-index: 2;
    }

    .image-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
        transition: transform 0.3s ease;
    }

    .image-container:hover img {
        transform: scale(1.025);
    }

    .overlay-button {
        position: absolute;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transform: scale(1);
        opacity: 0;
        transition: opacity 0.2s ease, transform 0.1s ease, background-color 0.2s;
    }
    
    .star-button {
        bottom: 10px;
        left: 10px;
    }
    
    .download-all-button {
        bottom: 10px;
        left: 50px;
    }

    .image-container:hover .overlay-button {
        opacity: 1;
    }

    .overlay-button:hover {
        background-color: rgba(0, 0, 0, 0.8);
    }

    .overlay-button:active {
        transform: scale(0.9);
    }

    @@keyframes click-pulse {
        0% { transform: scale(1); }
        50% { transform: scale(0.9); }
        100% { transform: scale(1); }
    }
</style>

@code {
    private List<ImageModel> _images = [];

    public string PageTitle { get; set; } = "Civitai Firehose";

    public int Unseen { get; set; }

    public string GetDownloadStatusIcon(ImageModel image)
    {
        return image.PushStatus switch
        {
            // ⭐
            ImagePushStatus.NotPushed => "\u2b50",
            // ⏳
            ImagePushStatus.Pushing => "\u23f3",
            // ❌
            ImagePushStatus.Failed => "\u274c",
            // ✓
            ImagePushStatus.Succeeded => "\u2713",
            _ => throw new ArgumentOutOfRangeException()
        };
    }
    
    protected override void OnInitialized()
    {
        _images = CivitaiPoller.GetImages();
        CivitaiPoller.NewImagesFound += SetImages;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsService.Initialise(this);
        }
    }

    private async Task SetImages(int newCount)
    {
        await InvokeAsync(async () => {
            _images = CivitaiPoller.GetImages();
            
            Logger.LogInformation("Got {ImageCount} new images from service, updating UI", newCount);

            Unseen += newCount;
            PageTitle = $"Civitai Firehose ({Unseen})";
            await JsService.SetTabTitle(PageTitle);

            StateHasChanged();
        });
    }
    
    [JSInvokable]
    public async Task OnTabFocused()
    {
        Logger.LogDebug("Tab focused, clearing any unread notifications");

        Unseen = 0;
        
        PageTitle = "Civitai Firehose";

        await JsService.SetTabTitle(PageTitle);
    }
    
    private async Task OnImageButtonClick(ImageModel image)
    {
        Logger.LogInformation("Sending {ImageUrl} to Hydrus service", image.ImageUrl);
        await Writer.WriteAsync(image);
    }
    
    private async Task OnDownloadAllClick(ImageModel image)
    {
        var images = await CivitaiPoller.GetAllImagesFromPost(image.PostId);

        foreach (var imageModel in images)
        {
            await Writer.WriteAsync(imageModel);
        }
    }

    public void Dispose()
    {
        CivitaiPoller.NewImagesFound -= SetImages;
        JsService.Dispose();
    }
}