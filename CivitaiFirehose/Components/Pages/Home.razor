@page "/"
@implements IDisposable
@rendermode InteractiveServer
@inject HomeViewmodel Viewmodel

<HeadContent>
    <PageTitle>@Viewmodel.PageTitle</PageTitle>
    <link href="home.css" rel="stylesheet"/>
</HeadContent>

<HeaderBar/>

<div class="grid-container">
    @foreach (var image in Viewmodel.Images)
    {
        <div class="grid-item">
            <div class="image-container">
                <a href="@image.PostUrl" target="_blank">
                    <img src="@image.ImageUrl" alt="Grid Item">
                </a>
                <button class="overlay-button star-button" @onclick="() => OnImageButtonClick(image)">
                    @GetDownloadStatusIcon(image)
                </button>
                <button class="overlay-button download-all-button" @onclick="() => OnDownloadAllClick(image)">
                    ⬇️
                </button>
                <button class="overlay-button blacklist-button" @onclick="() => OnBlacklistUser(image)">
                    ❌
                </button>
            </div>
        </div>
    }
</div>

@code {
    public string GetDownloadStatusIcon(ImageModel image) => Viewmodel.GetDownloadStatusIcon(image);

    protected override void OnInitialized()
    {
        Viewmodel.OnInitialized();
        Viewmodel.StateUpdated += async () => await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await Viewmodel.OnAfterRenderAsync(this);
    }
    
    [JSInvokable]
    public async Task OnTabFocused() => await Viewmodel.OnTabFocused();

    private async Task OnImageButtonClick(ImageModel image) => await Viewmodel.OnImageButtonClick(image);
    private async Task OnDownloadAllClick(ImageModel image) => await Viewmodel.OnDownloadAllClick(image);
    private async Task OnBlacklistUser(ImageModel image) => await Viewmodel.OnBlacklistUser(image);

    public void Dispose() => Viewmodel.Dispose();
}