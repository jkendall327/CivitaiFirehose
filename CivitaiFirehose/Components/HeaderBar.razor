@namespace CivitaiFirehose.Components.Layout
@inject NavigationManager NavigationManager

<header class="header">
    <div class="header-content">
        <div class="search-container">
            <div class="search-input-container">
                <div class="search-type-select">
                    <select @bind="_selectedSearchType">
                        <option value="postId">Posts</option>
                        <option value="modelId">Models</option>
                        <option value="userId">Users</option>
                    </select>
                    <div class="select-arrow">â–¼</div>
                </div>
                <input type="text"
                       @bind="_searchInput"
                       @bind:event="oninput"
                       @onkeyup="HandleKeyPress"
                       placeholder="Enter ID or username..."
                       class="search-input"/>
                <button class="search-button" @onclick="HandleSearch">Search</button>
                @if (_showError)
                {
                    <div class="validation-error">
                        <div class="error-bubble">
                            Post and model IDs must be numbers
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</header>

<HelpModal @bind-IsVisible="_showHelp"/>
<SettingsModal @bind-IsVisible="_showSettings"/>

<style>
    .header {
        background-color: #1a1a1a;
        border-bottom: 1px solid #333;
        max-height: 60px;
        padding: 0.35rem;
        width: 100%;
    }

    .header-content {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
        max-width: 1200px;
        margin: 0 auto;
        position: relative;
    }

    .search-container {
        display: flex;
        width: 400px;
    }

    .search-input-container {
        position: relative;
        display: flex;
        width: 100%;
        gap: 0.25rem;
    }

    .search-type-select {
        position: relative;
        width: 100px;
    }

    .search-type-select select {
        width: 100%;
        height: 1.8rem;
        padding: 0.25rem 1.5rem 0.25rem 0.5rem;
        border: none;
        border-radius: 3px;
        font-size: 0.9rem;
        background-color: #333;
        color: white;
        appearance: none;
        cursor: pointer;
    }

    .select-arrow {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        color: #999;
        pointer-events: none;
        font-size: 0.8rem;
    }

    .search-input {
        flex: 1;
        padding: 0.25rem 0.5rem;
        border: none;
        border-radius: 3px;
        font-size: 0.9rem;
        height: 1.8rem;
        background-color: #333;
        color: white;
    }

    .search-input::placeholder {
        color: #999;
    }

    .search-button {
        padding: 0.25rem 0.75rem;
        height: 1.8rem;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-size: 0.9rem;
        background-color: #0d6efd;
        color: white;
    }

    .search-button:hover {
        filter: brightness(1.1);
    }

    .search-input:focus, .search-type-select select:focus {
        outline: none;
        background-color: #404040;
    }

    .validation-error {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        margin-top: 4px;
        z-index: 10;
    }

    .error-bubble {
        background-color: rgba(40, 40, 40, 0.95);
        color: #ff6b6b;
        padding: 6px 12px;
        border-radius: 4px;
        font-size: 0.8rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 107, 107, 0.3);
        max-width: fit-content;
        position: relative;
    }

    .error-bubble::before {
        content: '';
        position: absolute;
        top: -5px;
        left: 10px;
        width: 10px;
        height: 10px;
        background-color: rgba(40, 40, 40, 0.95);
        transform: rotate(45deg);
        border-left: 1px solid rgba(255, 107, 107, 0.3);
        border-top: 1px solid rgba(255, 107, 107, 0.3);
    }
</style>

@code {
    private string _searchInput = "";
    private string _selectedSearchType = "postId";
    
    private bool _showHelp;
    private bool _showSettings;
    private bool _showError;

    private void ShowHelp() => _showHelp = true;
    private void ShowSettings() => _showSettings = true;
    
    private void HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(_searchInput))
        {
            _showError = false;
            return;
        }

        // Simple UI validation for search types that have to be numbers.
        if (_selectedSearchType is "postId" or "modelId" && !int.TryParse(_searchInput, out var _))
        {
            _showError = true;
            return;
        }
        
        _showError = false;

        var parameters = new Dictionary<string, object?> 
        {
            { _selectedSearchType, _searchInput }
        };
        
        // We have to use the base URI here or query params will be concatenated
        // (e.g. ?postId=123&modelId=123)
        // which is invalid.
        var uri = NavigationManager.GetUriWithQueryParameters(NavigationManager.BaseUri, parameters);
    
        NavigationManager.NavigateTo(uri);
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            HandleSearch();
        }
    }
}