@namespace CivitaiFirehose.Components.Layout
@inject NavigationManager NavigationManager

<header class="header">
    <div class="header-content">
        <button class="push-all-button" @onclick="GoHome">
            Home
        </button>
        <div class="search-container">
            <div class="search-input-container">
                <div class="search-type-select">
                    <select @bind="_selectedSearchType">
                        <option value="postId">Posts</option>
                        <option value="modelId">Models</option>
                        <option value="userId">Users</option>
                    </select>
                    <div class="select-arrow">▼</div>
                </div>
                <input type="text"
                       @bind="_searchInput"
                       @bind:event="oninput"
                       @onkeyup="HandleKeyPress"
                       placeholder="Enter ID or username..."
                       class="search-input"/>
                <button class="search-button" @onclick="HandleSearch">Search</button>
                @if (_showError)
                {
                    <div class="validation-error">
                        <div class="error-bubble">
                            Post and model IDs must be numbers
                        </div>
                    </div>
                }
            </div>
        </div>
        <button class="push-all-button" @onclick="HandlePushAll">
            Push All Images ⬇️
        </button>
    </div>
</header>

<HelpModal @bind-IsVisible="_showHelp"/>
<SettingsModal @bind-IsVisible="_showSettings"/>

@code {
    private string _searchInput = "";
    private string _selectedSearchType = "postId";
    
    private bool _showHelp;
    private bool _showSettings;
    private bool _showError;

    private void ShowHelp() => _showHelp = true;
    private void ShowSettings() => _showSettings = true;
    
    [Parameter]
    public EventCallback OnPushAllClick { get; set; }
    
    private async Task HandlePushAll() => await OnPushAllClick.InvokeAsync();

    private void HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(_searchInput))
        {
            _showError = false;
            return;
        }

        // Simple UI validation for search types that have to be numbers.
        if (_selectedSearchType is "postId" or "modelId" && !int.TryParse(_searchInput, out var _))
        {
            _showError = true;
            return;
        }
        
        _showError = false;

        var parameters = new Dictionary<string, object?> 
        {
            { _selectedSearchType, _searchInput }
        };
        
        // We have to use the base URI here or query params will be concatenated
        // (e.g. ?postId=123&modelId=123), which is invalid.
        var uri = NavigationManager.GetUriWithQueryParameters(NavigationManager.BaseUri, parameters);
    
        NavigationManager.NavigateTo(uri, forceLoad: true);
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            HandleSearch();
        }
    }

    private void GoHome()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri, forceLoad: true);
    }
}