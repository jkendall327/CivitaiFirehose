@namespace CivitaiFirehose.Components.Layout
@inject NavigationManager NavigationManager

<header class="header">
    <div class="header-content">
        <div class="search-container">
            <div class="search-input-container">
                <input type="text"
                       @bind="_searchInput"
                       @bind:event="oninput"
                       @onkeyup="HandleKeyPress"
                       placeholder="Enter a Civitai post/model ID..."
                       class="search-input"/>
                @if (_showError)
                {
                    <div class="validation-error">
                        <div class="error-bubble">
                            Please enter a valid number
                        </div>
                    </div>
                }
            </div>
            <button class="search-button" @onclick="SearchForPosts">Posts</button>
            <button class="search-button" @onclick="SearchForModels">Models</button>
        </div>
        <div class="header-buttons">
            <button class="header-button" @onclick="ShowSettings">Settings</button>
            <button class="header-button" @onclick="ShowHelp">Help</button>
        </div>
    </div>
</header>

<HelpModal @bind-IsVisible="_showHelp"/>
<SettingsModal @bind-IsVisible="_showSettings"/>

<style>
    .header {
        background-color: #1a1a1a;
        border-bottom: 1px solid #333;
        max-height: 60px;
        padding: 0.35rem;
        width: 100%;
    }

    .header-content {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
        max-width: 1200px;
        margin: 0 auto;
        position: relative;
    }

    .search-container {
        display: flex;
        gap: 0.25rem;
        width: 400px;
    }

    .search-input {
        flex: 1;
        padding: 0.25rem 0.5rem;
        border: none;
        border-radius: 3px;
        font-size: 0.9rem;
        height: 1.8rem;
        background-color: #333;
        color: white;
    }

    .search-input::placeholder {
        color: #999;
    }

    .search-button {
        padding: 0.25rem 0.75rem;
        height: 1.8rem;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-size: 0.9rem;
        background-color: #0d6efd;
        color: white;
    }

    .header-buttons {
        position: absolute;
        right: 0;
        display: flex;
        gap: 0.5rem;
    }

    .header-button {
        padding: 0.25rem 0.75rem;
        height: 1.8rem;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-size: 0.9rem;
        background-color: #444;
        color: white;
    }

    .header-button:hover, .search-button:hover {
        filter: brightness(1.1);
    }

    .search-input:focus {
        outline: none;
        background-color: #404040;
    }

    .search-input-container {
        position: relative;
        flex: 1;
    }

    .validation-error {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        margin-top: 4px;
        z-index: 10;
    }

    .error-bubble {
        background-color: rgba(40, 40, 40, 0.95);
        color: #ff6b6b;
        padding: 6px 12px;
        border-radius: 4px;
        font-size: 0.8rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 107, 107, 0.3);
        max-width: fit-content;
        position: relative;
    }

    .error-bubble::before {
        content: '';
        position: absolute;
        top: -5px;
        left: 10px;
        width: 10px;
        height: 10px;
        background-color: rgba(40, 40, 40, 0.95);
        transform: rotate(45deg);
        border-left: 1px solid rgba(255, 107, 107, 0.3);
        border-top: 1px solid rgba(255, 107, 107, 0.3);
    }
</style>

@code {
    private string _searchInput = "";
    
    private bool _showHelp;
    private bool _showSettings;
    private bool _showError;

    private void ShowHelp() => _showHelp = true;
    private void ShowSettings() => _showSettings = true;

    private void SearchForPosts() => Search("postId");
    private void SearchForModels() => Search("modelId");

    private void Search(string urlQuery)
    {
        if (string.IsNullOrWhiteSpace(_searchInput))
        {
            _showError = false;
            return;
        }

        if (int.TryParse(_searchInput, out var id))
        {
            _showError = false;
            NavigationManager.NavigateTo($"/?{urlQuery}={id}");
        }
        else
        {
            _showError = true;
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        // TODO: is there a sensible way to have keyboard shortcuts for both posts and models?
        if (e.Key == "Enter")
        {
            SearchForPosts();
        }
    }
}